export class AdminConnection {
  constructor(arg0?: any);
  createProfile(arg0?: any, arg1?: any): any;
  importCard(arg0?: any, arg1?: any): any;
  getAllCards(): any;
  deleteCard(arg0?: any): any;
  deleteProfile(arg0?: any): any;
  getProfile(arg0?: any): any;
  getAllProfiles(): any;
  connect(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  disconnect(): any;
  install(arg0?: any, arg1?: any): any;
  _getCurrentIdentity(): any;
  _generateBootstrapTransactions(arg0?: any, arg1?: any, arg2?: any): any;
  _buildStartTransaction(arg0?: any): any;
  start(arg0?: any): any;
  deploy(arg0?: any): any;
  undeploy(arg0?: any): any;
  update(arg0?: any): any;
  reset(arg0?: any): any;
  upgrade(): any;
  ping(): any;
  pingInner(): any;
  activate(): any;
  setLogLevel(arg0?: any): any;
  getLogLevel(): any;
  list(): any;
  importIdentity(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  requestIdentity(arg0?: any, arg1?: any, arg2?: any): any;
  exportIdentity(arg0?: any, arg1?: any): any;
}
export class BusinessNetworkDefinition {
  static fromArchive(arg0?: any): any;
  static _getPackageJson(arg0?: any): any;
  static _processDependencies(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  static _processModelFiles(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static _processScriptFiles(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static _processPermissionsAcl(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static _processQueryFile(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static _processReadme(arg0?: any): any;
  static fromDirectory(arg0?: any, arg1?: any): any;
  static processDirectory(arg0?: any, arg1?: any): any;
  static processFile(arg0?: any, arg1?: any): any;
  static walkSync(arg0?: any, arg1?: any, arg2?: any): any;
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any);
  getIdentifier(): any;
  getMetadata(): any;
  getName(): any;
  getVersion(): any;
  getDescription(): any;
  toArchive(arg0?: any): any;
  accept(arg0?: any, arg1?: any): any;
  getIntrospector(): any;
  getFactory(): any;
  getSerializer(): any;
  getScriptManager(): any;
  getAclManager(): any;
  getModelManager(): any;
  getQueryManager(): any;
  setReadme(arg0?: any): any;
  setPackageJson(arg0?: any): any;
}
export class Logger {
  static getSelectionTree(): any;
  static setSelectionTree(arg0?: any): any;
  static getFunctionalLogger(): any;
  static setFunctionalLogger(arg0?: any): any;
  static getDebugEnv(): any;
  static getLoggerConfig(): any;
  static getLog(arg0?: any): any;
  static _setupLog(arg0?: any): any;
  static _parseLoggerConfig(arg0?: any): any;
  static _loadLogger(arg0?: any): any;
  static reset(): any;
  constructor(arg0?: any);
  padRight(arg0?: any, arg1?: any): any;
  intlog(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogMain(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogFirst(arg0?: any, arg1?: any, arg2?: any): any;
  debug(arg0?: any, arg1?: any, arg2?: any): any;
  warn(arg0?: any, arg1?: any, arg2?: any): any;
  info(arg0?: any, arg1?: any, arg2?: any): any;
  verbose(arg0?: any, arg1?: any, arg2?: any): any;
  error(arg0?: any, arg1?: any, arg2?: any): any;
  entry(arg0?: any, arg1?: any): any;
  exit(arg0?: any, arg1?: any): any;
}
